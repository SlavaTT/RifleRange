using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.ComponentModel.DataAnnotations;
//--------------------------------------------------------------------------------
//-- Generated By: Slava
//-- Date Generated: 12/25/2016
//--------------------------------------------------------------------------------
namespace RifleRange.DAL
{

    public class rrUser
    {
        [SqlField]
        public int UserId { get; set; }
        [SqlField]
        public string FirstName { get; set; }
        [SqlField]
        public string LastName { get; set; }
        [SqlField]
        public string UserName
        {
            get
            {
                return string.Format("{0}, {1}", FirstName, LastName);
            }
        }
        [SqlField]
        public string Email { get; set; }
        [SqlField]
        public string LoginName { get; set; }
        [SqlField]
        public string Password { get; set; }
        [SqlField]
        public bool Enabled { get; set; }
        [SqlField]
        public string Role { get; set; }
        [SqlField]
        public DateTime CreateDate { get; set; }
        [SqlField]
        public DateTime? LastUpdate { get; set; }

        static rrUser()
        {
            RecordMapper.Register(typeof(rrUser), typeof(SqlField));
        }
        public rrUser(SqlDataReader reader)
        {
            RecordMapper.ReadObject(this, reader);
        }
    }

    public class rrUserDB
    {
        public static LinkedList<rrUser> GetUser(int? UserId = null,
            string LoginName = null, string Password = null)
        {
            LinkedList<rrUser> result = new LinkedList<rrUser>();
            using (SqlConnection conn = new SqlConnection(SQL.RifleRange))
            {
                try
                {
                    SqlCommand cmd = new SqlCommand("dbo.usp_GetUser", conn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    if (UserId != null) cmd.Parameters.AddWithValue("@UserId", UserId);
                    if (LoginName != null) cmd.Parameters.AddWithValue("@LoginName", LoginName);
                    if (Password != null) cmd.Parameters.AddWithValue("@Password", Password);

                    conn.Open();
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader != null && !reader.IsClosed)
                    {
                        result = new LinkedList<rrUser>();
                        while (reader.Read())
                        {
                            rrUser obj = new rrUser(reader);
                            result.AddLast(obj);
                        }
                        reader.Close();
                    }

                }
                catch (Exception ex)
                {
                    throw new Exception(ex.Message, ex);
                }
            }
            return result;
        }

        public static void DeleteUser(int UserId)
        {
            using (SqlConnection conn = new SqlConnection(SQL.RifleRange))
            {
                try
                {
                    SqlCommand cmd = new SqlCommand("dbo.usp_DeleteUser", conn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@UserId", UserId);
                    conn.Open();
                    cmd.ExecuteNonQuery();

                }
                catch (Exception ex)
                {
                    throw new Exception(ex.Message, ex);
                }
            }
        }

        public static void UpdateUser(int UserId, string FirstName, string LastName,
            string Email, string LoginName, string Password)
        {
            using (SqlConnection conn = new SqlConnection(SQL.RifleRange))
            {
                try
                {
                    SqlCommand cmd = new SqlCommand("dbo.usp_UpdateUser", conn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@UserId", UserId);
                    cmd.Parameters.AddWithValue("@FirstName", FirstName);
                    cmd.Parameters.AddWithValue("@LastName", LastName);
                    cmd.Parameters.AddWithValue("@Email", Email);
                    cmd.Parameters.AddWithValue("@LoginName", LoginName);
                    cmd.Parameters.AddWithValue("@Password", Password);
                    conn.Open();
                    cmd.ExecuteNonQuery();

                }
                catch (Exception ex)
                {
                    throw new Exception(ex.Message, ex);
                }
            }
        }

        public static int InsertUser(string FirstName, string LastName, string Email,
            string LoginName, string Password)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(SQL.RifleRange))
            {
                try
                {
                    SqlCommand cmd = new SqlCommand("dbo.usp_InsertUser", conn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@FirstName", FirstName);
                    cmd.Parameters.AddWithValue("@LastName", LastName);
                    cmd.Parameters.AddWithValue("@Email", Email);
                    cmd.Parameters.AddWithValue("@LoginName", LoginName);
                    cmd.Parameters.AddWithValue("@Password", Password);
                    SqlParameter NewUserId = new SqlParameter("@NewUserId", SqlDbType.Int, 10);
                    NewUserId.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(NewUserId);
                    conn.Open();
                    cmd.ExecuteNonQuery();
                    result = (int)NewUserId.Value;

                }
                catch (Exception ex)
                {
                    throw new Exception(ex.Message, ex);
                }
            }
            return result;
        }
        public static bool CheckLoginExists(string LoginName, int? ExceptUserId = null)
        {
            using (SqlConnection conn = new SqlConnection(SQL.RifleRange))
            {
                try
                {
                    SqlCommand cmd = new SqlCommand("dbo.usp_CheckLoginExists", conn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@LoginName", LoginName);
                    SqlParameter Exists = new SqlParameter("@Exists", SqlDbType.Bit, 1);
                    Exists.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(Exists);
                    if (ExceptUserId != null) cmd.Parameters.AddWithValue("@ExceptUserId", ExceptUserId);
                    conn.Open();
                    cmd.ExecuteNonQuery();
                    return (bool)Exists.Value;
                }
                catch (Exception ex)
                {
                    throw new Exception(ex.Message, ex);
                }
            }
        }
    }
}
